use chrono::{DateTime, Utc};
use std::collections::HashMap;

use crate::sistence::types::RecollectionId;

/// Metadata associated with a recollection entry
#[derive(Clone, Debug)]
pub struct RecollectionMetadata {
    /// ID of the associated recollection entry
    entry_id: RecollectionId,
    /// Tags associated with this recollection
    tags: Vec<String>,
    /// Vector embeddings for semantic search, if available
    embeddings: Option<Vec<f32>>,
    /// Level of importance of this recollection
    importance: ImportanceLevel,
    /// Confidence score (range: 0.0-1.0)
    confidence: f32,
    /// Semantic attributes generated by LLM
    semantic_attributes: HashMap<String, String>,
    /// Temporal relevance information, if applicable
    temporal_relevance: Option<TemporalRelevance>,
    /// Timestamp when this metadata was generated
    generated_at: DateTime<Utc>,
    /// Information about the generators that produced this metadata
    generator_info: Vec<MetadataGeneratorInfo>,
}

/// Information about a generator that produced metadata
#[derive(Clone, Debug)]
pub struct MetadataGeneratorInfo {
    /// Unique identifier for the generator
    generator_id: String,
    /// Type of generator (e.g., model name, algorithm)
    generator_type: String,
    /// Confidence score of this generator
    confidence: f32,
}

/// Levels of importance for a recollection
#[derive(Clone, Debug)]
pub enum ImportanceLevel {
    /// Highest importance level, critical information
    Critical,
    /// High importance information
    High,
    /// Medium importance information
    Medium,
    /// Low importance information
    Low,
    /// Background information with minimal importance
    Background,
}

/// Information about the temporal relevance of a recollection
#[derive(Clone, Debug)]
pub struct TemporalRelevance {
    /// Starting time from which this recollection is valid, if applicable
    valid_from: Option<DateTime<Utc>>,
    /// End time until which this recollection is valid, if applicable
    valid_until: Option<DateTime<Utc>>,
    /// Rate at which the importance decays over time, if applicable
    decay_rate: Option<f32>,
}

#[derive(Clone, Debug)]
pub enum MetadataType {
    Tags,
    Embeddings,
    Importance,
    Confidence,
    SemanticAttributes,
    TemporalRelevance,
}
